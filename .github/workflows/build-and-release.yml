name: Build and Release

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
      code_signing:
        description: 'Enable code signing'
        required: true
        default: false
        type: boolean
      create_dmg:
        description: 'Create DMG package'
        required: true
        default: true
        type: boolean

env:
  XCODE_PROJECT: "Applite.xcodeproj"
  SCHEME: "Applite"

jobs:
  build:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Apple Certificate
      if: ${{ github.event.inputs.code_signing == 'true' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
    
    - name: Install provisioning profile
      if: ${{ github.event.inputs.code_signing == 'true' }}
      uses: apple-actions/download-provisioning-profiles@v1
      with:
        bundle-id: com.milanvarady.Applite
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
    
    - name: Prepare build environment
      run: |
        echo "üîÑ Preparing build environment..."
        
        XCODE_VERSION=$(xcodebuild -version | head -1 | awk '{print $2}')
        XCODE_BUILD=$(xcodebuild -version | tail -1 | awk '{print $3}')
        SWIFT_VERSION=$(grep -o 'SWIFT_VERSION = [^;]*' ${{ env.XCODE_PROJECT }}/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        MACOS_TARGET=$(grep -o 'MACOSX_DEPLOYMENT_TARGET = [^;]*' ${{ env.XCODE_PROJECT }}/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        
        echo "Build Environment:"
        echo "  ‚Ä¢ Xcode: $XCODE_VERSION ($XCODE_BUILD)"
        echo "  ‚Ä¢ Swift: ${SWIFT_VERSION:-5.9}"
        echo "  ‚Ä¢ macOS Target: ${MACOS_TARGET:-13.0}"
        echo "  ‚Ä¢ Configuration: ${{ github.event.inputs.configuration }}"
        
        echo "SWIFT_VERSION=${SWIFT_VERSION:-5.9}" >> $GITHUB_ENV
        echo "MACOS_TARGET=${MACOS_TARGET:-13.0}" >> $GITHUB_ENV
        
        rm -rf DerivedData ~/Library/Developer/Xcode/DerivedData/Applite-* ~/Library/Caches/org.swift.swiftpm
        rm -f build_output.log *.dmg

    - name: Build application
      run: |
        echo "üî® Building Applite (${{ github.event.inputs.configuration }})..."
        
        if [ "${{ github.event.inputs.code_signing }}" == "true" ]; then
          CODE_SIGN_IDENTITY="Developer ID Application"
          PROVISIONING_PROFILE_SPECIFIER="Applite Distribution"
          echo "üîê Code signing enabled"
        else
          CODE_SIGN_IDENTITY=""
          PROVISIONING_PROFILE_SPECIFIER=""
          echo "üö´ Code signing disabled"
        fi
        
        XCODE_MAJOR_VERSION=$(xcodebuild -version | head -1 | grep -o '[0-9]\+' | head -1)
        
        BUILD_ARGS=(
          -project "${{ env.XCODE_PROJECT }}"
          -scheme "${{ env.SCHEME }}"
          -configuration "${{ github.event.inputs.configuration }}"
          -derivedDataPath DerivedData
          -skipPackagePluginValidation
          -disableAutomaticPackageResolution
          -quiet
          -hideShellScriptEnvironment
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
        )
        
        if [ "$XCODE_MAJOR_VERSION" -ge 15 ]; then
          BUILD_ARGS+=(-skipMacroValidation)
        fi
        
        if [ -n "$CODE_SIGN_IDENTITY" ]; then
          BUILD_ARGS+=(CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY")
          [ -n "$PROVISIONING_PROFILE_SPECIFIER" ] && BUILD_ARGS+=(PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER")
        else
          BUILD_ARGS+=(CODE_SIGN_IDENTITY="" CODE_SIGN_ENTITLEMENTS="")
        fi
        
        BUILD_ARGS+=(build)
        
        set +e
        xcodebuild "${BUILD_ARGS[@]}" 2>&1 | tee build_output.log
        BUILD_EXIT_CODE=${PIPESTATUS[0]}
        set -e
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Build completed successfully!"
        else
          echo "‚ùå Build failed with exit code: $BUILD_EXIT_CODE"
          echo "üîç Last 50 lines of build output:"
          tail -50 build_output.log
          exit $BUILD_EXIT_CODE
        fi
    
    - name: Create DMG
      if: ${{ github.event.inputs.create_dmg == 'true' }}
      run: |
        echo "üì¶ Creating DMG package..."
        
        APP_PATH=$(find DerivedData -name "Applite.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå Could not find Applite.app"
          exit 1
        fi
        
        mkdir -p dist
        ln -s /Applications dist/Applications
        cp -R "$APP_PATH" dist/
        
        DMG_NAME="Applite-${{ github.event.inputs.configuration }}.dmg"
        hdiutil create -volname "Applite" -srcfolder dist -ov -format UDZO "$DMG_NAME"
        
        DMG_SIZE=$(ls -lh "$DMG_NAME" | awk '{print $5}')
        echo "‚úÖ DMG created: $DMG_NAME ($DMG_SIZE)"
    
    - name: Notarize DMG
      if: ${{ github.event.inputs.code_signing == 'true' && github.event.inputs.create_dmg == 'true' }}
      run: |
        echo "üîí Notarizing DMG..."
        xcrun notarytool submit "Applite-${{ github.event.inputs.configuration }}.dmg" \
          --issuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --key-id ${{ secrets.APPSTORE_KEY_ID }} \
          --key ${{ secrets.APPSTORE_PRIVATE_KEY }} \
          --wait
        echo "‚úÖ Notarization completed"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Applite-${{ github.event.inputs.configuration }}-${{ github.run_number }}
        path: |
          DerivedData/Build/Products/${{ github.event.inputs.configuration }}/Applite.app
          *.dmg
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        rm -rf DerivedData dist *.dmg build_output.log
    
    - name: Build Summary
      if: always()
      run: |
        echo "üìä Build Summary"
        echo "==============="
        echo "Repository: ${{ github.repository }}"
        echo "Configuration: ${{ github.event.inputs.configuration }}"
        echo "Code Signing: ${{ github.event.inputs.code_signing }}"
        echo "DMG Created: ${{ github.event.inputs.create_dmg }}"
        echo "Status: ${{ job.status }}"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo ""
          echo "‚úÖ Build completed successfully!"
          echo "üì¶ Download artifact: Applite-${{ github.event.inputs.configuration }}-${{ github.run_number }}"
        elif [ "${{ job.status }}" = "failure" ]; then
          echo ""
          echo "‚ùå Build failed - check logs above for details"
        fi
