name: Build and Release

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
      code_signing:
        description: 'Enable code signing'
        required: true
        default: false
        type: boolean
      create_dmg:
        description: 'Create DMG package'
        required: true
        default: false
        type: boolean

jobs:
  detect-versions:
    runs-on: macos-latest
    outputs:
      xcode-version: ${{ steps.detect.outputs.xcode-version }}
      macos-version: ${{ steps.detect.outputs.macos-version }}
      swift-version: ${{ steps.detect.outputs.swift-version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect versions
      id: detect
      run: |
        # Auto-detect optimal Xcode version for this project
        if grep -q 'compatibilityVersion = "Xcode 14.0"' Applite.xcodeproj/project.pbxproj; then
          XCODE_VERSION="14.1"
        elif grep -q 'compatibilityVersion = "Xcode 15.0"' Applite.xcodeproj/project.pbxproj; then
          XCODE_VERSION="15.4"
        elif grep -q 'compatibilityVersion = "Xcode 16.0"' Applite.xcodeproj/project.pbxproj; then
          XCODE_VERSION="16.1"
        else
          XCODE_VERSION="latest-stable"
        fi
        
        # Auto-detect macOS deployment target
        MACOS_VERSION=$(grep -o 'MACOSX_DEPLOYMENT_TARGET = [^;]*' Applite.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        
        # Auto-detect Swift version
        SWIFT_VERSION=$(grep -o 'SWIFT_VERSION = [^;]*' Applite.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        
        echo "xcode-version=$XCODE_VERSION" >> $GITHUB_OUTPUT
        echo "macos-version=${MACOS_VERSION:-13.0}" >> $GITHUB_OUTPUT
        echo "swift-version=${SWIFT_VERSION:-5.9}" >> $GITHUB_OUTPUT
        
        echo "üîç Detected versions: Xcode $XCODE_VERSION, macOS ${MACOS_VERSION:-13.0}, Swift ${SWIFT_VERSION:-5.9}"

  build:
    runs-on: macos-latest
    needs: detect-versions
    env:
      XCODE_PROJECT: "Applite.xcodeproj"
      SCHEME: "Applite"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ needs.detect-versions.outputs.xcode-version }}
    
    - name: Setup build environment  
      run: |
        echo "üöÄ Setting up build environment"
        echo "Configuration: ${{ github.event.inputs.configuration }}"
        echo "Code signing: ${{ github.event.inputs.code_signing }}"
        echo "DMG creation: ${{ github.event.inputs.create_dmg }}"
        echo "Target macOS: ${{ needs.detect-versions.outputs.macos-version }}"
        echo "Swift version: ${{ needs.detect-versions.outputs.swift-version }}"
    
    - name: Install Apple Certificate
      if: ${{ github.event.inputs.code_signing == 'true' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
    
    - name: Install provisioning profile
      if: ${{ github.event.inputs.code_signing == 'true' }}
      uses: apple-actions/download-provisioning-profiles@v1
      with:
        bundle-id: com.milanvarady.Applite
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
    
    - name: Prepare for build
      run: |
        echo "üîÑ Preparing for build with automatic package resolution..."
        rm -rf DerivedData ~/Library/Developer/Xcode/DerivedData/Applite-* ~/Library/Caches/org.swift.swiftpm
        echo "‚úÖ Ready for build"

    - name: Build and archive application
      run: |
        echo "üî® Building Applite..."
        
        # Set code signing arguments based on input
        if [ "${{ github.event.inputs.code_signing }}" == "true" ]; then
          CODE_SIGN_IDENTITY="Developer ID Application"
          PROVISIONING_PROFILE_SPECIFIER="Applite Distribution"
          echo "üîê Code signing enabled"
        else
          CODE_SIGN_IDENTITY=""
          PROVISIONING_PROFILE_SPECIFIER=""
          echo "üö´ Code signing disabled"
        fi
        
        # Build the application
        xcodebuild \
          -project "${{ env.XCODE_PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -configuration "${{ github.event.inputs.configuration }}" \
          -derivedDataPath DerivedData \
          ${CODE_SIGN_IDENTITY:+CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY"} \
          ${PROVISIONING_PROFILE_SPECIFIER:+PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER"} \
          build
    
    - name: Create DMG
      if: ${{ github.event.inputs.create_dmg == 'true' }}
      run: |
        echo "üì¶ Creating DMG package..."
        
        # Find the built app
        APP_PATH=$(find DerivedData -name "Applite.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå Could not find Applite.app"
          exit 1
        fi
        
        echo "Found app at: $APP_PATH"
        
        # Create DMG
        mkdir -p dist
        ln -s /Applications dist/Applications
        cp -R "$APP_PATH" dist/
        
        hdiutil create -volname "Applite" -srcfolder dist -ov -format UDZO "Applite-${{ github.event.inputs.configuration }}.dmg"
        
        echo "‚úÖ DMG created successfully"
    
    - name: Notarize app
      if: ${{ github.event.inputs.code_signing == 'true' && github.event.inputs.create_dmg == 'true' }}
      run: |
        echo "üîí Notarizing DMG..."
        
        xcrun notarytool submit "Applite-${{ github.event.inputs.configuration }}.dmg" \
          --issuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --key-id ${{ secrets.APPSTORE_KEY_ID }} \
          --key ${{ secrets.APPSTORE_PRIVATE_KEY }} \
          --wait
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Applite-${{ github.event.inputs.configuration }}-${{ github.run_number }}
        path: |
          DerivedData/Build/Products/${{ github.event.inputs.configuration }}/Applite.app
          *.dmg
        retention-days: 30
    
    - name: Build Summary
      run: |
        echo "üéâ Build completed successfully!"
        echo "Configuration: ${{ github.event.inputs.configuration }}"
        echo "Code signing: ${{ github.event.inputs.code_signing }}"
        echo "DMG created: ${{ github.event.inputs.create_dmg }}"
        echo "Artifacts uploaded to GitHub Actions"
