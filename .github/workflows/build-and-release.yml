name: Build and Release

# Build Environment Configuration
env:
  OVERRIDE_XCODE_VERSION: ""       # Override Xcode version (empty = use latest installed)
  OVERRIDE_SWIFT_VERSION: ""       # Override Swift version (empty = use project's version)

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
      code_signing:
        description: 'Enable code signing'
        required: true
        default: false
        type: boolean
      create_dmg:
        description: 'Create DMG package'
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: macos-14
    env:
      XCODE_PROJECT: "Applite.xcodeproj"
      SCHEME: "Applite"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect environment and setup build
      run: |
        echo "üîç Build Environment Configuration Analysis"
        echo "=========================================="
        
        # Auto-detect project settings
        PROJECT_MACOS_VERSION=$(grep -o 'MACOSX_DEPLOYMENT_TARGET = [^;]*' Applite.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        PROJECT_SWIFT_VERSION=$(grep -o 'SWIFT_VERSION = [^;]*' Applite.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        CURRENT_MACOS_VERSION=$(sw_vers -productVersion | cut -d'.' -f1)
        
        # Determine final versions
        FINAL_XCODE_VERSION="${{ env.OVERRIDE_XCODE_VERSION }}"
        FINAL_SWIFT_VERSION="${{ env.OVERRIDE_SWIFT_VERSION }}"
        
        if [ -z "$FINAL_XCODE_VERSION" ]; then
          FINAL_XCODE_VERSION="latest"
          ACTUAL_XCODE_VERSION=$(xcodebuild -version | head -1 | awk '{print $2}')
        else
          ACTUAL_XCODE_VERSION="$FINAL_XCODE_VERSION"
        fi
        
        if [ -z "$FINAL_SWIFT_VERSION" ]; then
          FINAL_SWIFT_VERSION="${PROJECT_SWIFT_VERSION:-5.9}"
        fi
        
        echo ""
        echo "üìã Project Configuration:"
        echo "  ‚Ä¢ Configuration: ${{ github.event.inputs.configuration }}"
        echo "  ‚Ä¢ Code signing: ${{ github.event.inputs.code_signing }}"
        echo "  ‚Ä¢ DMG creation: ${{ github.event.inputs.create_dmg }}"
        echo "  ‚Ä¢ Target macOS: ${PROJECT_MACOS_VERSION:-13.0}"
        echo "  ‚Ä¢ Project Swift: ${PROJECT_SWIFT_VERSION:-5.9}"
        echo ""
        echo "üîß Build Environment:"
        echo "  ‚Ä¢ Runner: macOS $CURRENT_MACOS_VERSION"
        if [ "$FINAL_XCODE_VERSION" = "latest" ]; then
          echo "  ‚Ä¢ Xcode: $ACTUAL_XCODE_VERSION (latest installed)"
        else
          echo "  ‚Ä¢ Xcode: $FINAL_XCODE_VERSION (override)"
        fi
        echo "  ‚Ä¢ Swift: $FINAL_SWIFT_VERSION"
        echo ""
        
        # Export variables for subsequent steps
        echo "FINAL_XCODE_VERSION=$FINAL_XCODE_VERSION" >> $GITHUB_ENV
        echo "FINAL_SWIFT_VERSION=$FINAL_SWIFT_VERSION" >> $GITHUB_ENV
        echo "PROJECT_MACOS_VERSION=${PROJECT_MACOS_VERSION:-13.0}" >> $GITHUB_ENV
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.FINAL_XCODE_VERSION }}
    
    - name: Install Apple Certificate
      if: ${{ github.event.inputs.code_signing == 'true' }}
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
    
    - name: Install provisioning profile
      if: ${{ github.event.inputs.code_signing == 'true' }}
      uses: apple-actions/download-provisioning-profiles@v1
      with:
        bundle-id: com.milanvarady.Applite
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
    
    - name: Prepare for build
      run: |
        echo "üîÑ Preparing for build with Swift Package Manager compatibility..."
        
        # Clean all package resolution caches
        rm -rf DerivedData ~/Library/Developer/Xcode/DerivedData/Applite-* ~/Library/Caches/org.swift.swiftpm
        
        # Extract Swift version from project configuration
        DETECTED_SWIFT_VERSION=$(grep -o 'SWIFT_VERSION = [^;]*' Applite.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        
        # Handle Ifrit dependency tools version conflict
        echo "üîß Configuring for Ifrit dependency (swift-tools-version:5.9 vs Swift ${DETECTED_SWIFT_VERSION} project)"
        
        # Set environment for compatibility
        export SWIFT_VERSION=${DETECTED_SWIFT_VERSION}
        export XCODE_CONFIGURATION_BUILD_DIR=DerivedData/Build/Products/${{ github.event.inputs.configuration }}
        
        echo "üìã Swift version from project: ${DETECTED_SWIFT_VERSION}"
        echo "‚úÖ Ready for build with compatibility settings"

    - name: Resolve Swift packages
      run: |
        echo "üîÑ Resolving Swift packages..."
        
        # Clean any existing package resolution
        rm -rf DerivedData ~/Library/Developer/Xcode/DerivedData/Applite-* ~/Library/Caches/org.swift.swiftpm
        
        # With Xcode 15.0.1+, package resolution should work seamlessly
        xcodebuild -resolvePackageDependencies \
          -project "${{ env.XCODE_PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -derivedDataPath DerivedData
        
        echo "‚úÖ Package dependencies resolved successfully"

    - name: Build and archive application
      run: |
        echo "üî® Building Applite..."
        
        # Extract Swift version from project configuration
        DETECTED_SWIFT_VERSION=$(grep -o 'SWIFT_VERSION = [^;]*' Applite.xcodeproj/project.pbxproj | head -1 | cut -d' ' -f3 | tr -d ';')
        echo "üìã Using Swift version from project: ${DETECTED_SWIFT_VERSION}"
        
        # Set code signing arguments based on input
        if [ "${{ github.event.inputs.code_signing }}" == "true" ]; then
          CODE_SIGN_IDENTITY="Developer ID Application"
          PROVISIONING_PROFILE_SPECIFIER="Applite Distribution"
          echo "üîê Code signing enabled"
        else
          CODE_SIGN_IDENTITY=""
          PROVISIONING_PROFILE_SPECIFIER=""
          echo "üö´ Code signing disabled"
        fi
        
        # Handle Swift Package Manager tools version conflict with Ifrit
        echo "üîß Handling Swift Package Manager compatibility..."
        
        # Check Xcode version to determine which flags are available
        XCODE_VERSION_OUTPUT=$(xcodebuild -version | head -1)
        XCODE_MAJOR_VERSION=$(echo "$XCODE_VERSION_OUTPUT" | grep -o '[0-9]\+' | head -1)
        echo "üìã Detected Xcode major version: $XCODE_MAJOR_VERSION"
        
        # Build command with version-specific flags
        BUILD_ARGS=(
          -project "${{ env.XCODE_PROJECT }}"
          -scheme "${{ env.SCHEME }}"
          -configuration "${{ github.event.inputs.configuration }}"
          -derivedDataPath DerivedData
          -skipPackagePluginValidation
          -disableAutomaticPackageResolution
        )
        
        # Add macro validation skip for Xcode 15+ (where the flag is available)
        if [ "$XCODE_MAJOR_VERSION" -ge 15 ]; then
          echo "üîß Adding -skipMacroValidation for Xcode $XCODE_MAJOR_VERSION"
          BUILD_ARGS+=(-skipMacroValidation)
        else
          echo "üîß Skipping -skipMacroValidation for Xcode $XCODE_MAJOR_VERSION (not supported)"
        fi
        
        # Add code signing parameters if provided, otherwise disable code signing and entitlements
        if [ -n "$CODE_SIGN_IDENTITY" ]; then
          BUILD_ARGS+=(CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY")
        else
          BUILD_ARGS+=(CODE_SIGN_IDENTITY="" CODE_SIGN_ENTITLEMENTS="")
        fi
        
        if [ -n "$PROVISIONING_PROFILE_SPECIFIER" ]; then
          BUILD_ARGS+=(PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER")
        fi
        
        # Add additional build settings
        BUILD_ARGS+=(
          SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
          build
        )
        
        # Note: Using project's original Swift version without any override
        echo "üìã Building with project's original Swift version (no override)"
        
        # Execute the build with all arguments
        echo "üî® Executing: xcodebuild ${BUILD_ARGS[*]}"
        xcodebuild "${BUILD_ARGS[@]}"
    
    - name: Create DMG
      if: ${{ github.event.inputs.create_dmg == 'true' }}
      run: |
        echo "üì¶ Creating DMG package..."
        
        # Find the built app
        APP_PATH=$(find DerivedData -name "Applite.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "‚ùå Could not find Applite.app"
          exit 1
        fi
        
        echo "Found app at: $APP_PATH"
        
        # Create DMG
        mkdir -p dist
        ln -s /Applications dist/Applications
        cp -R "$APP_PATH" dist/
        
        hdiutil create -volname "Applite" -srcfolder dist -ov -format UDZO "Applite-${{ github.event.inputs.configuration }}.dmg"
        
        echo "‚úÖ DMG created successfully"
    
    - name: Notarize app
      if: ${{ github.event.inputs.code_signing == 'true' && github.event.inputs.create_dmg == 'true' }}
      run: |
        echo "üîí Notarizing DMG..."
        
        xcrun notarytool submit "Applite-${{ github.event.inputs.configuration }}.dmg" \
          --issuer ${{ secrets.APPSTORE_ISSUER_ID }} \
          --key-id ${{ secrets.APPSTORE_KEY_ID }} \
          --key ${{ secrets.APPSTORE_PRIVATE_KEY }} \
          --wait
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Applite-${{ github.event.inputs.configuration }}-${{ github.run_number }}
        path: |
          DerivedData/Build/Products/${{ github.event.inputs.configuration }}/Applite.app
          *.dmg
        retention-days: 30
    
    - name: Build Summary
      run: |
        echo "üéâ Build completed successfully!"
        echo "Configuration: ${{ github.event.inputs.configuration }}"
        echo "Code signing: ${{ github.event.inputs.code_signing }}"
        echo "DMG created: ${{ github.event.inputs.create_dmg }}"
        echo "Artifacts uploaded to GitHub Actions"
